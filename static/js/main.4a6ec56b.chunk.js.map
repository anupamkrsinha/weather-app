{"version":3,"sources":["app-component/weather.component.jsx","app-component/form.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["minmaxTemp","min","max","className","Weather","props","city","icon","temp_celsius","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","get_WeatherIcon","weatherIcon","id","state","undefined","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a6ec56b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Weather = (props)=> {\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"cards pt-4\">\r\n                <h1>{props.city} </h1>\r\n                <h5 className=\"py-4\">\r\n                <i className = {`wi ${props.icon} display-1`}></i>\r\n                   \r\n                </h5>\r\n                {props.temp_celsius ?(<h1 className = \"py-2\">\r\n                    {props.temp_celsius}&deg;\r\n                </h1>):null}\r\n                {/** Show max and min Temperature */}\r\n                    {minmaxTemp(props.temp_min,props.temp_max)}\r\n\r\n                    <h4 className = \"py-3\" > {props.description} </h4>\r\n                    \r\n            </div>\r\n        </div>\r\n        \r\n    );\r\n};\r\n\r\n\r\n\r\nfunction minmaxTemp(min,max){\r\n    if(min && max){\r\n        return(\r\n            <h3>\r\n            <span className = \"px-4\">{min}&deg;</span>\r\n            <span className = \"px-4\">{max}&deg;</span>\r\n        </h3>\r\n        );\r\n    };\r\n   \r\n};\r\nexport default Weather;","import React from 'react';\r\nimport './form.style.css';\r\n\r\nconst Form = props =>{\r\n    return(\r\n        <div className=\"container\">\r\n            <div> {props.error ? error():null }</div>\r\n        <form onSubmit = {props.loadweather}>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-3 offset-md-2\">\r\n                    <input \r\n                    type = \"text\" \r\n                    className = \"form-control\" \r\n                    name =\"city\" \r\n                    autoComplete =\"off\"\r\n                    placeholder =\"City\"\r\n                    /> \r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                    <input \r\n                    type = \"text\" \r\n                    className = \"form-control\" \r\n                    name =\"country\" \r\n                    autoComplete =\"off\"\r\n                    placeholder = \"Country\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mt-md-0 text-md-left\">\r\n                    <button \r\n                    className=\"btn btn-warning\">\r\n                        Get Weather\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            </form>\r\n        </div>\r\n    \r\n    );\r\n};\r\n\r\nfunction error(){\r\n    return(\r\n        <div className=\"alert alert-danger mx-5\" role = \"alert\">\r\n            Please Enter City and country\r\n        </div>\r\n    );\r\n}\r\nexport default Form;","/** \n *    Anupam Kumar Sinha\n *     \n *    6205294779\n * \n *  email:  anupamkrsinha123@gmail.com\n * \n * \n * \n * \n * \n * \n * \n * \n * \n */\nimport React from \"react\";\nimport Weather from \"./app-component/weather.component\";\nimport 'weather-icons/css/weather-icons.css';\nimport \"./App.css\";\nimport'bootstrap/dist/css/bootstrap.min.css';\nimport Form from \"./app-component/form.component\";\n\n\n\nconst API_key = \"8940b967fc380638ed836154a94ceed4\";\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius:undefined,\n      temp_max:undefined,\n      temp_min : undefined,\n      description:\"\",\n      error:false\n    };\n    \n\n    this.weatherIcon = {\n        Thunderstorm :\"wi-thunderstorm\",\n        Drizzle:\"wi-sleet\",\n        Rain:\"wi-storm-showers\",\n        Snow:\"wi-snow\",\n        Atmosphere:\"wi-fog\",\n        Clear:\"wi-day-sunny\",\n        Clouds:\"wi-day-fog\"\n    };\n  }\n\n\n  calCelsius(temp){\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  get_WeatherIcon(icons,rangeId){\n    switch (true) {\n      case rangeId >= 200 && rangeId <= 232:\n        this.setState ({icon:this.weatherIcon.Thunderstorm});\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState ({icon:this.weatherIcon.Drizzle});\n        break;\n      case rangeId >= 500 && rangeId <= 531:\n        this.setState ({icon:this.weatherIcon.Rain});\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState ({icon:this.weatherIcon.Snow});\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState ({icon:this.weatherIcon.Atmosphere});\n        break;\n      case rangeId === 800:\n        this.setState ({icon:this.weatherIcon.Clear});\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState ({icon:this.weatherIcon.Clouds});\n        break;\n      default:\n        this.setState ({icon:this.weatherIcon.Clouds});\n    };\n  };\n  \n  getWeather = async(e) =>{\n\n    e.preventDefault();\n     const city = e.target.elements.city.value;\n     const country = e.target.elements.country.value;\n\n    if (city && country){\n      const api_call = await fetch\n      (`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`);\n     \n      const response = await api_call.json();\n     console.log(response);\n     this.setState({\n       city :`${response.name},${response.sys.country}`,\n       celsius:this.calCelsius(response.main.temp),\n       temp_max:this.calCelsius(response.main.temp_max),\n       temp_min:this.calCelsius(response.main.temp_min),\n       description:response.weather[0].description,\n       error : false,\n     \n       \n     });\n \n     this.get_WeatherIcon(this.weatherIcon,response.weather[0].id);\n     \n     \n    }else{\n      this.setState({error : true});\n    }\n\n  };\n  render(){\n    return(\n      <div className=\"App\">\n\n          <Form loadweather = {this.getWeather} error = {this.state.error}/>    \n        <Weather \n        city ={this.state.city} \n        country = {this.state.country}\n        temp_celsius = {this.state.celsius}\n        temp_max={this.state.temp_max}\n        temp_min={this.state.temp_min}\n        description={this.state.description}\n        icon = {this.state.icon}\n\n        \n        />\n      </div>\n    );\n  };\n};\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}